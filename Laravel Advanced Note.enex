<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20210616T151528Z" application="Evernote" version="10.13.4">
  <note>
    <title>Untitled Note</title>
    <created>20210514T082037Z</created>
    <updated>20210516T151100Z</updated>
    <note-attributes>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><br /></div><table width="773px" style="width:773px;border-collapse:collapse;"><colgroup><col style="width: 229px;" /><col style="width: 544px;" /></colgroup><tbody><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><span style="font-size: 24px;"><span style="color:rgb(146, 146, 146);">Questions</span></span></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><span style="font-size: 24px;"><span style="color:rgb(146, 146, 146);">Notes</span></span></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>e1 - Service Container</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is the differences between abstraction and encapsulation ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Abstraction:</div><ul><li><div>hide complexities (implementation)</div></li><li><div>generalization</div></li><li><div>using abstract classes &amp; interfaces</div></li></ul><div>Encapsulation:</div><ul><li><div>hide data using getter &amp; setter</div></li><li><div>group / encapsulate data</div></li><li><div>using class, functions, and access modifier</div></li></ul></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is dependency injection ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Inject dependencies (auto instantiation). example:</div><ul><li><div>using service container as function parameter (cannot pass arg to constructor)</div></li><li><div>bind the service container using AppServiceProvider on register method</div></li><li><div>bind object to view using AppServiceProvider on boot method</div></li></ul></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is service container ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Encapsulation of controller logic. Will be injected on controller using dependency injection.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is service provider ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Manage dependencies resolution on app level (AppServiceProvider).</div><div>Can pass arg to constructor.</div><ul><li><div>bind = make new instance every call </div></li><li><div>singleton = only one instance every call</div></li></ul></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>e2 - View Composers</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to attach data to view ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>type <code style="--en-code: true">$view-&gt;with('var_name', 'collections of a model')</code></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is view composer ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Manage views dependencies.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>(option 1) How to share variable to every views ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>On <code style="--en-code: true">AppServiceProvider@boot</code>, import <code style="--en-code: true">view</code> facade,</div><div>type <code style="--en-code: true">View:share('&lt;var_name&gt;',  &lt;collections of a model&gt;)</code></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>(option 2) How to share variable to one or many specified views ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Use view composer.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to use view composer ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>On <code style="--en-code: true">AppServiceProvider@boot</code>,  import <code style="--en-code: true">view</code> facade,</div><div>type: <code style="--en-code: true">Views::composer(&lt;one or array of views or *&gt;, </code></div><div><code style="--en-code: true">function ($view) { </code></div><div><code style="--en-code: true">$view-&gt;with('var_name', 'collections of a model'); </code></div><div><code style="--en-code: true">});</code></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>(option 3) How to encapsulate sharing variable to one or many specified views ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Make a class for sharing variable.</div><div><br /></div><div>On <code style="--en-code: true">app\Http\View\Composer\ChannelComposer.php</code>, import <code style="--en-code: true">Illuminate\View\View</code>, make <code style="--en-code: true">compose(View $view)</code> function that has this line:</div><div><code style="--en-code: true">$view-&gt;with('var_name', 'collections of a model')</code></div><div><br /></div><div>On <code style="--en-code: true">AppServiceProvider@boot</code>,  import <code style="--en-code: true">view</code> facade, type:<code style="--en-code: true">Views::composer(&lt;one or array of views&gt;, ChannelsComposer::class</code></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>e3 - Polymorphic Relationships</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is polymorphic relationship ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>An object can belongs to another, one or more object.</div><div>Example: an image can take form as an attribute of post and user object.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is needed for polymorphic relationship table ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>It need two special columns:</div><ul><li><div><code style="--en-code: true">$table-&gt;unsignedBigInteger('&lt;noun&gt;able_id')</code></div></li><ul><li><div>store foreign id</div></li></ul><li><div><code style="--en-code: true">$table-&gt;string('&lt;noun&gt;able_type')</code></div></li><ul><li><div>store related type's  model</div></li></ul></ul></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is needed for polymorphic relationship model ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>At related type, make relation to &lt;noun&gt; using :</div><ul><li><div>One to one: <code style="--en-code: true">morphOne(&lt;noun&gt;::class, '&lt;noun&gt;able')</code></div></li><li><div>One to many: <code style="--en-code: true">morphMany(&lt;noun&gt;::class, '&lt;noun&gt;able')</code></div></li><li><div>Many to many: </div></li></ul><div>              <code style="--en-code: true"> morphToMany(&lt;noun&gt;::class, '&lt;noun&gt;able'</code></div><div><br /></div><div>At &lt;noun&gt;::class, make relation to related type using:</div><ul><li><div><code style="--en-code: true">public function &lt;noun&gt;able() { morphTo()}</code></div></li><li><div>Many to many: </div></li></ul><div>              <code style="--en-code: true">morphedByMany(&lt;noun&gt;::class, '&lt;noun&gt;able'</code></div><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>e4 - Facades</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is facades ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Provide pseudo-static function (hide the class's instantiation using binding).</div><div>Example: storage facade, mail facade</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to make facades ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><ol><li><div>Make a facade class that store facade implementation</div></li><li><div>On AppServiceProvider , bind <code style="--en-code: true">&lt;facade alias&gt;</code> to its implementation class's instantiation.</div></li><li><div>On the facade class, use magic method:</div></li><ul><li><div><code style="--en-code: true">static function __callstatic($method, $arguments)</code></div></li><li><div>arguments is an array</div></li></ul><li><div>On the facade class, make </div></li></ol><div>               <code style="--en-code: true">resolveFacade($name) { return app()[$name] }</code></div><ol start="5"><li><div>Inside <code style="--en-code: true">__callstatic</code> function, type </div></li></ol><div>              <code style="--en-code: true">return (self::&gt;resolveFacade('&lt;facade alias&gt;'))</code></div><div>                                      <code style="--en-code: true">-&gt;$method(...$arguments)</code></div><ul style=""><ul><li><div><code style="--en-code: true">-&gt;$method</code> is a dynamic method call</div></li></ul></ul><div><br /></div><div>To use facade, use the <code style="--en-code: true">&lt;facade&gt;::&lt;method&gt;</code>.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>e5 - Macros</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is macros ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Add new functionality to built-in classes. Substitute for service container.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Where can i see list of Laravel macroable classes ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><a href="https://coderstape.com/blog/3-macroable-laravel-classes-full-list" rev="en_rl_none">https://coderstape.com/blog/3-macroable-laravel-classes-full-list</a></div><div>Example: Filesystem, JsonResponse, Request, Mailer, Route, Collection, Factory, View, Str</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to declare macro ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><ol><li><div>Make sure the <code style="--en-code: true">&lt;bult-in class&gt;</code> is macroable </div></li><ul><li><div>(use Macroable traits)</div></li></ul><li><div>Declare macro a single macro or multiple macro at a time</div></li></ol></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is the differences between macro and mixin</div><div>function on Macroable traits ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Macro = single macros at a time</div><div>Mixin = multiple macros at a time</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to declare a single macro at a time  ?</div><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>On boot in AppServiceProvider, write:</div><div><code style="--en-code: true">&lt;bult-in class&gt;::macro('&lt;method name&gt;', &lt;method_implementation&gt;)</code></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to declare macro multiple macros at a time ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><ol><li><div>Make <code style="--en-code: true">App\Mixins\&lt;build-in class&gt;Mixins.php</code></div></li><li><div>On <code style="--en-code: true">&lt;build-in class&gt;Mixins.php</code>, make one or multiple <code style="--en-code: true">&lt;method name&gt;()</code> function</div></li><li><div>Inside each <code style="--en-code: true">&lt;method name&gt;()</code> function, </div></li></ol><div>                add <code style="--en-code: true">return function($args){ &lt;return something&gt; }</code></div><ol start="4"><li><div>On AppServiceProvider, write <code style="--en-code: true">&lt;build-in class&gt;::mixin(new &lt;build-in class&gt;Mixins())</code></div></li></ol></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>e6 - Pipelines (Design Pattern)</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to make custom middleware ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><ol><li><div>Make middleware class</div></li><li><div>Define <code style="--en-code: true">handle</code> function</div></li><ul><li><div>if permitted, return <code style="--en-code: true">$next($request)</code></div></li><li><div>else, return <code style="--en-code: true">response('&lt;message&gt;')</code></div></li></ul><li><div>Register middleware  class in <code style="--en-code: true">app\http\kernel.php</code></div></li><ul><li><div>Global: on <code style="--en-code: true">middleware</code> array</div></li><li><div>Group: on <code style="--en-code: true">middlewareGroup</code> array</div></li><li><div>Single: on <code style="--en-code: true">routeMiddleware</code> array</div></li></ul></ol></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is pipelines design pattern ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>OOP design pattern  to handle stepped changes.</div><div>Example: search using multiple filter.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to make pipelines ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><ol><li><div>On <code style="--en-code: true">App\QueryFilters\&lt;filter category&gt;.php</code>, </div></li></ol><div>                         <code style="--en-code: true">use Clousure</code> and make </div><div>                       <code style="--en-code: true"> function handle($request, Closure $nest)</code></div><ol start="2"><li><div>On <code style="--en-code: true">handle</code> function, return:</div></li><ul><li><div>if filter isn't requested (<code style="--en-code: true">! request()-&gt;has(&lt;filter&gt;)</code>):  </div></li><ul><li><div>return <code style="--en-code: true">$next($request)</code></div></li></ul><li><div>else: <code style="--en-code: true">return $builder-&gt;&lt;query without get / all&gt;</code></div></li><ul><li><div><code style="--en-code: true">$builder = $next($request)</code></div></li></ul></ul><li><div>On <code style="--en-code: true">&lt;object&gt;</code> controller, write:</div></li></ol><div>                  <code style="--en-code: true">&lt;var&gt;</code> = <code style="--en-code: true">app(Pipeline::class</code></div><div>                  <code style="--en-code: true">-&gt;send(&lt;query builder&gt;)-&gt;through([ &lt;all query filter class&gt; ])-&gt;thenReturn()</code></div><ul style=""><ul><li><div>use <code style="--en-code: true">Illuminate\Pipeline</code></div></li><li><div><code style="--en-code: true">&lt;var&gt;</code> is a query builder.</div></li></ul></ul></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is closure ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Data type to pass data to another function/class.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to return model query builder ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Type <code style="--en-code: true">&lt;model&gt;::query()</code></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to get the class name of the caller class ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Use <code style="--en-code: true">class_basename($this)</code></div><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to retain query string on paginate's page change ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Use <code style="--en-code: true">&lt;paginated var&gt; -&gt;appends(request()-&gt;input())</code></div><div><code style="--en-code: true">-&gt;links()</code></div><div><br /></div><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>e7 - Repository Pattern</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is repository pattern ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>OOP design pattern</div><ul><li><div>to create middle layer between database and controller.</div></li><ul><li><div>act as data provider</div></li></ul><li><div>to encapsulate data processing in controller </div></li><ul><li><div>so that controller only handle request &amp; redirection</div></li></ul><li><div>add function reusability on another class.</div></li><li><div>useful on large-scale project</div></li></ul></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is the trade off when using repository pattern ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>add complexity to project</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to  use repository pattern ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><ol><li><div>Make <code style="--en-code: true">App\Repositories\&lt;Model&gt;Repository.php</code> class.</div></li><li><div>Make method  on <code style="--en-code: true">&lt;Model&gt;Repository.php class</code>.</div></li><li><div>On the controller:</div></li><ol><li><div>type <code style="--en-code: true">private $&lt;model&gt;Repository</code></div></li><li><div>make <code style="--en-code: true">__construct(&lt;Model&gt;Repository $&lt;model&gt;Repository)</code></div></li></ol><li><div>To use the repo, type<code style="--en-code: true">$this-&gt;&lt;model&gt;Repository)-&gt;&lt;method&gt;</code></div></li></ol></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to use repository pattern with interface ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><ol><li><div>Make <code style="--en-code: true">App\Repositories\&lt;model&gt;RepositoryInterface.php</code></div></li><li><div>Make method declaration on interface.</div></li><li><div>Make the method implementation on <code style="--en-code: true">app\Repositories\&lt;model&gt;Repository.php class</code></div></li><li><div>On the controller:</div></li><ol><li><div>type <code style="--en-code: true">private $&lt;model&gt;Repository</code></div></li><li><div>make<code style="--en-code: true"> __construct(</code></div></li></ol></ol><div>                        <code style="--en-code: true">&lt;model&gt;RepositoryInterface $&lt;model&gt;Repository)</code></div><ol start="5"><li><div>Make new provider called <code style="--en-code: true">RepositoriesServiceProvider.php</code></div></li><li><div>On register function, type <code style="--en-code: true">$this-&gt;app&gt;bind( &lt;model&gt;RepositoryInterface, &lt;model&gt;Repository)</code>.</div></li><li><div>On <code style="--en-code: true">config\app.php</code>,  in providers section, add <code style="--en-code: true">App\Providers\RepositoriesServiceProvider::class</code></div></li><li><div>To use the repo, type <code style="--en-code: true">$this-&gt;&lt;model&gt;Repository-&gt;&lt;method&gt;</code></div></li></ol></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to map collection ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Use <code style="--en-code: true"> &lt;collections&gt;-&gt;map(function(&lt;collection&gt;) { </code></div><div><code style="--en-code: true">return [&lt;map format&gt;] } )</code></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is higher order messages ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Automatic foreach on method chaining.</div><div>Example: <code style="--en-code: true">&lt;collections&gt;-&gt;&lt;method&gt;</code>, where <code style="--en-code: true">&lt;method&gt;</code> is defined on the <code style="--en-code: true">&lt;collections&gt;</code> model and it  process one collection at a time.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>e8 - Lazy Collections &amp; PHP Generator</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is lazy collections ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Can store more data than normal collection by using PHP Generator.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to use lazy collections ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Use <code style="--en-code: true">LazyCollection</code> facade.</div><div>To fetch <code style="--en-code: true">all()</code> using <code style="--en-code: true">LazyCollection</code>, type <code style="--en-code: true">&lt;Model&gt;::cursor()</code>.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is PHP Generator ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Object for buffered loading. The code will pause at yield until next method is called. To see currently yield value, use </div><div><code style="--en-code: true">&lt;generator object&gt;-&gt;current()</code>.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to get generator object ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Replace return with yield.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to run all yield in a function ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Use <code style="--en-code: true">foreach (&lt;function&gt;() as $result){}</code>  .</div><div><code style="--en-code: true">$result</code> will store every yield value in <code style="--en-code: true">&lt;function&gt;()</code>.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>e9 - Soft Deletes</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>What is soft deletes ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Hide records (store deleted records on trash bin).</div><div>The records are still in the DB, but inaccessible through normal means.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to use soft deletes ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><ol><li><div>Add <code style="--en-code: true">deleted_at</code> column on <code style="--en-code: true">&lt;object&gt;</code> table.</div></li><li><div>On <code style="--en-code: true">&lt;object&gt;</code> model, write <code style="--en-code: true">use SoftDeletes</code>.</div></li><li><div>All <code style="--en-code: true">delete()</code> call using the <code style="--en-code: true">&lt;object&gt;</code> model will be <code style="--en-code: true">SoftDeletes</code></div></li></ol></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to add column to DB on prod ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><ol><li><div>Write<code style="--en-code: true">php artisan make:migration add_&lt;col name&gt;_at_column_to&lt;table name&gt; --table &lt;table name&gt;</code></div></li><li><div>Add column in migration</div></li><ul><li><div>Don't forget to set it to <code style="--en-code: true">nullable()</code></div></li><li><div>Ex: <code style="--en-code: true">$table-&gt;&lt;col type&gt;(&lt;col name&gt;)-&gt;nullable()</code></div></li></ul></ol></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to specified column placement when adding column to DB ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>Write <code style="--en-code: true">$table-&gt;&lt;col type&gt;(&lt;col name&gt;)-&gt;after('target col name')-&gt;nullable()</code></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to get SoftDeleted data ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>On query builder, use <code style="--en-code: true">withTrashed()</code> method.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to undo delete ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><span style="font-family: Source Sans Pro, -apple-system, system-ui, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;">Type </span><code style="--en-code: true">&lt;soft deleted object&gt;-&gt;restore()</code></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>How to use force (hard) deletes ?</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><span style="font-family: Source Sans Pro, -apple-system, system-ui, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;">Type </span><code style="--en-code: true">&lt;soft deleted object&gt;-&gt;forceDelete()</code></div><div>This command will remove the data off the DB.</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr></tbody></table><div><br /></div><div><span style="font-size: 24px;"><span style="color:rgb(146, 146, 146);">Summary</span></span></div><ul><li><div><br /></div></li></ul><div><br /></div></en-note>      ]]>
    </content>
  </note>
</en-export>
